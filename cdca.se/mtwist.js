// Generated by CoffeeScript 1.8.0
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

this.MTwist = (function() {
  function MTwist(seed) {
    var mti, uint32mul, _i;
    if (seed == null) {
      seed = Math.random() * 4294967295;
    }
    this.random = __bind(this.random, this);
    this.randomInt = __bind(this.randomInt, this);
    this.randomUint32 = __bind(this.randomUint32, this);
    uint32mul = function(n1, n2) {
      var n1High16, n1Low16, n2High16, n2Low16;
      n1Low16 = n1 & 0x0000ffff;
      n1High16 = n1 >>> 16;
      n2Low16 = n2 & 0x0000ffff;
      n2High16 = n2 >>> 16;
      return ((((n1 & 0xffff0000) * n2) >>> 0) + (((n1 & 0x0000ffff) * n2) >>> 0)) >>> 0;
    };
    this.mt = new Array(624);
    this.mt[0] = seed >>> 0;
    for (mti = _i = 1; _i < 624; mti = ++_i) {
      this.mt[mti] = (uint32mul(1812433253, this.mt[mti - 1] ^ (this.mt[mti - 1] >>> 30)) + mti) >>> 0;
    }
    this.mti = mti;
  }

  MTwist.prototype.randomUint32 = function() {
    var i, y, _i, _j;
    if (this.mti >= 624) {
      for (i = _i = 0; _i < 227; i = ++_i) {
        y = ((this.mt[i] & 0x80000000) | (this.mt[i + 1] & 0x7fffffff)) >>> 0;
        this.mt[i] = (this.mt[i + 397] ^ (y >>> 1) ^ (y & 1 ? 0x9908b0df : 0)) >>> 0;
      }
      for (i = _j = 227; _j < 623; i = ++_j) {
        y = ((this.mt[i] & 0x80000000) | (this.mt[i + 1] & 0x7fffffff)) >>> 0;
        this.mt[i] = (this.mt[i - 227] ^ (y >>> 1) ^ (y & 1 ? 0x9908b0df : 0)) >>> 0;
      }
      y = ((this.mt[623] & 0x80000000) | (this.mt[0] & 0x7fffffff)) >>> 0;
      this.mt[623] = (this.mt[396] ^ (y >>> 1) ^ (y & 1 ? 0x9908b0df : 0)) >>> 0;
      this.mti = 0;
    }
    y = this.mt[this.mti++];
    y = (y ^ (y >>> 11)) >>> 0;
    y = (y ^ ((y << 7) & 0x9d2c5680)) >>> 0;
    y = (y ^ ((y << 15) & 0xefc60000)) >>> 0;
    y = (y ^ (y >>> 18)) >>> 0;
    return y;
  };

  MTwist.prototype.randomInt = function(min, max) {
    var bitMask, bitsNeeded, int, range;
    range = max - min;
    if (range < 0) {
      throw "Invalid range";
    }
    if (range === 0) {
      return min;
    }
    bitsNeeded = range.toString(2).length;
    bitMask = (1 << bitsNeeded) - 1;
    while (true) {
      int = this.randomUint32() & bitMask;
      if (int <= range) {
        return min + int;
      }
    }
  };

  MTwist.prototype.random = function() {
    return this.randomUint32() / 4294967296;
  };

  return MTwist;

})();

//# sourceMappingURL=mtwist.js.map
